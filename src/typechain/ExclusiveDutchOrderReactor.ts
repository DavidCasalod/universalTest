/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type SignedOrderStruct = { order: BytesLike; sig: BytesLike };

export type SignedOrderStructOutput = [order: string, sig: string] & {
  order: string;
  sig: string;
};

export interface ExclusiveDutchOrderReactorInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "execute"
      | "executeBatch"
      | "executeBatchWithCallback"
      | "executeWithCallback"
      | "feeController"
      | "owner"
      | "permit2"
      | "setProtocolFeeController"
      | "transferOwnership"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Fill"
      | "OwnershipTransferred"
      | "ProtocolFeeControllerSet"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "execute",
    values: [SignedOrderStruct]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [SignedOrderStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatchWithCallback",
    values: [SignedOrderStruct[], BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeWithCallback",
    values: [SignedOrderStruct, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "feeController",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(functionFragment: "permit2", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "setProtocolFeeController",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;

  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBatchWithCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeWithCallback",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "permit2", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setProtocolFeeController",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
}

export namespace FillEvent {
  export type InputTuple = [
    orderHash: BytesLike,
    filler: AddressLike,
    swapper: AddressLike,
    nonce: BigNumberish
  ];
  export type OutputTuple = [
    orderHash: string,
    filler: string,
    swapper: string,
    nonce: bigint
  ];
  export interface OutputObject {
    orderHash: string;
    filler: string;
    swapper: string;
    nonce: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [user: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [user: string, newOwner: string];
  export interface OutputObject {
    user: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace ProtocolFeeControllerSetEvent {
  export type InputTuple = [
    oldFeeController: AddressLike,
    newFeeController: AddressLike
  ];
  export type OutputTuple = [
    oldFeeController: string,
    newFeeController: string
  ];
  export interface OutputObject {
    oldFeeController: string;
    newFeeController: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface ExclusiveDutchOrderReactor extends BaseContract {
  connect(runner?: ContractRunner | null): ExclusiveDutchOrderReactor;
  waitForDeployment(): Promise<this>;

  interface: ExclusiveDutchOrderReactorInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  execute: TypedContractMethod<[order: SignedOrderStruct], [void], "payable">;

  executeBatch: TypedContractMethod<
    [orders: SignedOrderStruct[]],
    [void],
    "payable"
  >;

  executeBatchWithCallback: TypedContractMethod<
    [orders: SignedOrderStruct[], callbackData: BytesLike],
    [void],
    "payable"
  >;

  executeWithCallback: TypedContractMethod<
    [order: SignedOrderStruct, callbackData: BytesLike],
    [void],
    "payable"
  >;

  feeController: TypedContractMethod<[], [string], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  permit2: TypedContractMethod<[], [string], "view">;

  setProtocolFeeController: TypedContractMethod<
    [_newFeeController: AddressLike],
    [void],
    "nonpayable"
  >;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<[order: SignedOrderStruct], [void], "payable">;
  getFunction(
    nameOrSignature: "executeBatch"
  ): TypedContractMethod<[orders: SignedOrderStruct[]], [void], "payable">;
  getFunction(
    nameOrSignature: "executeBatchWithCallback"
  ): TypedContractMethod<
    [orders: SignedOrderStruct[], callbackData: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "executeWithCallback"
  ): TypedContractMethod<
    [order: SignedOrderStruct, callbackData: BytesLike],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "feeController"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "permit2"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "setProtocolFeeController"
  ): TypedContractMethod<
    [_newFeeController: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  getEvent(
    key: "Fill"
  ): TypedContractEvent<
    FillEvent.InputTuple,
    FillEvent.OutputTuple,
    FillEvent.OutputObject
  >;
  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "ProtocolFeeControllerSet"
  ): TypedContractEvent<
    ProtocolFeeControllerSetEvent.InputTuple,
    ProtocolFeeControllerSetEvent.OutputTuple,
    ProtocolFeeControllerSetEvent.OutputObject
  >;

  filters: {
    "Fill(bytes32,address,address,uint256)": TypedContractEvent<
      FillEvent.InputTuple,
      FillEvent.OutputTuple,
      FillEvent.OutputObject
    >;
    Fill: TypedContractEvent<
      FillEvent.InputTuple,
      FillEvent.OutputTuple,
      FillEvent.OutputObject
    >;

    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "ProtocolFeeControllerSet(address,address)": TypedContractEvent<
      ProtocolFeeControllerSetEvent.InputTuple,
      ProtocolFeeControllerSetEvent.OutputTuple,
      ProtocolFeeControllerSetEvent.OutputObject
    >;
    ProtocolFeeControllerSet: TypedContractEvent<
      ProtocolFeeControllerSetEvent.InputTuple,
      ProtocolFeeControllerSetEvent.OutputTuple,
      ProtocolFeeControllerSetEvent.OutputObject
    >;
  };
}
